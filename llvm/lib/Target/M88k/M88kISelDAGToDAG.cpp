//===-- M88kISelDAGToDAG.cpp - A dag to dag inst
//selector for M88k --------===//
//
// Part of the LLVM Project, under the Apache License
// v2.0 with LLVM Exceptions. See
// https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH
// LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the
// M88k target.
//
//===----------------------------------------------------------------------===//

#include "M88k.h"
#include "M88kTargetMachine.h"
#include "MCTargetDesc/M88kMCTargetDesc.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Pass.h"
#include "llvm/Support/Debug.h"

using namespace llvm;

#define DEBUG_TYPE "m88k-isel"
#define PASS_NAME                                      \
  "M88k DAG->DAG Pattern Instruction Selection"

namespace {

class M88kDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  M88kDAGToDAGISel(M88kTargetMachine &TM,
                   CodeGenOptLevel OptLevel)
      : SelectionDAGISel(ID, TM, OptLevel) {}

  // Override SelectionDAGISel.
  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target
// description.
#include "M88kGenDAGISel.inc"
};
} // end anonymous namespace

char M88kDAGToDAGISel::ID = 0;

INITIALIZE_PASS(M88kDAGToDAGISel, DEBUG_TYPE, PASS_NAME,
                false, false)

FunctionPass *
llvm::createM88kISelDag(M88kTargetMachine &TM,
                        CodeGenOptLevel OptLevel) {
  return new M88kDAGToDAGISel(TM, OptLevel);
}

void M88kDAGToDAGISel::Select(SDNode *Node) {
  // Instruction Selection not handled by the
  // auto-generated tablegen selection should be handled
  // here.

  // Select the default instruction.
  SelectCode(Node);
}